// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace doc_index_proto {
class PairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pair>
      _instance;
} _Pair_default_instance_;
class DocInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DocInfo>
      _instance;
} _DocInfo_default_instance_;
class WeightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weight>
      _instance;
} _Weight_default_instance_;
class KwdInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KwdInfo>
      _instance;
} _KwdInfo_default_instance_;
class IndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Index>
      _instance;
} _Index_default_instance_;
}  // namespace doc_index_proto
namespace protobuf_index_2eproto {
void InitDefaultsPairImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::doc_index_proto::_Pair_default_instance_;
    new (ptr) ::doc_index_proto::Pair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doc_index_proto::Pair::InitAsDefaultInstance();
}

void InitDefaultsPair() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPairImpl);
}

void InitDefaultsDocInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_index_2eproto::InitDefaultsPair();
  {
    void* ptr = &::doc_index_proto::_DocInfo_default_instance_;
    new (ptr) ::doc_index_proto::DocInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doc_index_proto::DocInfo::InitAsDefaultInstance();
}

void InitDefaultsDocInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDocInfoImpl);
}

void InitDefaultsWeightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::doc_index_proto::_Weight_default_instance_;
    new (ptr) ::doc_index_proto::Weight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doc_index_proto::Weight::InitAsDefaultInstance();
}

void InitDefaultsWeight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWeightImpl);
}

void InitDefaultsKwdInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_index_2eproto::InitDefaultsWeight();
  {
    void* ptr = &::doc_index_proto::_KwdInfo_default_instance_;
    new (ptr) ::doc_index_proto::KwdInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doc_index_proto::KwdInfo::InitAsDefaultInstance();
}

void InitDefaultsKwdInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKwdInfoImpl);
}

void InitDefaultsIndexImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_index_2eproto::InitDefaultsDocInfo();
  protobuf_index_2eproto::InitDefaultsKwdInfo();
  {
    void* ptr = &::doc_index_proto::_Index_default_instance_;
    new (ptr) ::doc_index_proto::Index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doc_index_proto::Index::InitAsDefaultInstance();
}

void InitDefaultsIndex() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Pair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Pair, beg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Pair, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, show_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, jump_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, title_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::DocInfo, content_token_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Weight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Weight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Weight, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Weight, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Weight, first_pos_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::KwdInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::KwdInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::KwdInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::KwdInfo, doc_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Index, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Index, forward_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doc_index_proto::Index, inverted_index_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::doc_index_proto::Pair)},
  { 9, 21, sizeof(::doc_index_proto::DocInfo)},
  { 28, 36, sizeof(::doc_index_proto::Weight)},
  { 39, 46, sizeof(::doc_index_proto::KwdInfo)},
  { 48, 55, sizeof(::doc_index_proto::Index)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::doc_index_proto::_Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doc_index_proto::_DocInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doc_index_proto::_Weight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doc_index_proto::_KwdInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doc_index_proto::_Index_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "index.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013index.proto\022\017doc_index_proto\" \n\004Pair\022\013"
      "\n\003beg\030\001 \002(\r\022\013\n\003end\030\002 \002(\r\"\263\001\n\007DocInfo\022\n\n\002"
      "id\030\001 \002(\004\022\r\n\005title\030\002 \002(\t\022\017\n\007content\030\003 \002(\t"
      "\022\020\n\010show_url\030\004 \002(\t\022\020\n\010jump_url\030\005 \002(\t\022*\n\013"
      "title_token\030\006 \003(\0132\025.doc_index_proto.Pair"
      "\022,\n\rcontent_token\030\007 \003(\0132\025.doc_index_prot"
      "o.Pair\";\n\006Weight\022\016\n\006doc_id\030\001 \002(\004\022\016\n\006weig"
      "ht\030\002 \002(\005\022\021\n\tfirst_pos\030\003 \002(\005\"A\n\007KwdInfo\022\013"
      "\n\003key\030\001 \002(\t\022)\n\010doc_list\030\002 \003(\0132\027.doc_inde"
      "x_proto.Weight\"j\n\005Index\022/\n\rforward_index"
      "\030\001 \003(\0132\030.doc_index_proto.DocInfo\0220\n\016inve"
      "rted_index\030\002 \003(\0132\030.doc_index_proto.KwdIn"
      "fo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "index.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_index_2eproto
namespace doc_index_proto {

// ===================================================================

void Pair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pair::kBegFieldNumber;
const int Pair::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pair::Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_index_2eproto::InitDefaultsPair();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doc_index_proto.Pair)
}
Pair::Pair(const Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beg_, &from.beg_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&beg_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:doc_index_proto.Pair)
}

void Pair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&beg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&beg_)) + sizeof(end_));
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:doc_index_proto.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  ::protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pair& Pair::default_instance() {
  ::protobuf_index_2eproto::InitDefaultsPair();
  return *internal_default_instance();
}

Pair* Pair::New(::google::protobuf::Arena* arena) const {
  Pair* n = new Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:doc_index_proto.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&beg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&beg_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doc_index_proto.Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 beg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_beg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doc_index_proto.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doc_index_proto.Pair)
  return false;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doc_index_proto.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 beg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beg(), output);
  }

  // required uint32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doc_index_proto.Pair)
}

::google::protobuf::uint8* Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doc_index_proto.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 beg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beg(), target);
  }

  // required uint32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doc_index_proto.Pair)
  return target;
}

size_t Pair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doc_index_proto.Pair)
  size_t total_size = 0;

  if (has_beg()) {
    // required uint32 beg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->beg());
  }

  if (has_end()) {
    // required uint32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());
  }

  return total_size;
}
size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doc_index_proto.Pair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 beg = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->beg());

    // required uint32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doc_index_proto.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doc_index_proto.Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doc_index_proto.Pair)
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doc_index_proto.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      beg_ = from.beg_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doc_index_proto.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doc_index_proto.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Pair::Swap(Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pair::InternalSwap(Pair* other) {
  using std::swap;
  swap(beg_, other->beg_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DocInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocInfo::kIdFieldNumber;
const int DocInfo::kTitleFieldNumber;
const int DocInfo::kContentFieldNumber;
const int DocInfo::kShowUrlFieldNumber;
const int DocInfo::kJumpUrlFieldNumber;
const int DocInfo::kTitleTokenFieldNumber;
const int DocInfo::kContentTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocInfo::DocInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_index_2eproto::InitDefaultsDocInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doc_index_proto.DocInfo)
}
DocInfo::DocInfo(const DocInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      title_token_(from.title_token_),
      content_token_(from.content_token_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  show_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_show_url()) {
    show_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_url_);
  }
  jump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jump_url()) {
    jump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jump_url_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:doc_index_proto.DocInfo)
}

void DocInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jump_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

DocInfo::~DocInfo() {
  // @@protoc_insertion_point(destructor:doc_index_proto.DocInfo)
  SharedDtor();
}

void DocInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jump_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DocInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocInfo::descriptor() {
  ::protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocInfo& DocInfo::default_instance() {
  ::protobuf_index_2eproto::InitDefaultsDocInfo();
  return *internal_default_instance();
}

DocInfo* DocInfo::New(::google::protobuf::Arena* arena) const {
  DocInfo* n = new DocInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:doc_index_proto.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_token_.Clear();
  content_token_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!show_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*show_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!jump_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*jump_url_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doc_index_proto.DocInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doc_index_proto.DocInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doc_index_proto.DocInfo.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string show_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_show_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->show_url().data(), static_cast<int>(this->show_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doc_index_proto.DocInfo.show_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string jump_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jump_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jump_url().data(), static_cast<int>(this->jump_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doc_index_proto.DocInfo.jump_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .doc_index_proto.Pair title_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_title_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .doc_index_proto.Pair content_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_content_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doc_index_proto.DocInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doc_index_proto.DocInfo)
  return false;
#undef DO_
}

void DocInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doc_index_proto.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // required string show_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_url().data(), static_cast<int>(this->show_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.show_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->show_url(), output);
  }

  // required string jump_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jump_url().data(), static_cast<int>(this->jump_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.jump_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->jump_url(), output);
  }

  // repeated .doc_index_proto.Pair title_token = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->title_token_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->title_token(static_cast<int>(i)), output);
  }

  // repeated .doc_index_proto.Pair content_token = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_token_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->content_token(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doc_index_proto.DocInfo)
}

::google::protobuf::uint8* DocInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doc_index_proto.DocInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // required string show_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->show_url().data(), static_cast<int>(this->show_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.show_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->show_url(), target);
  }

  // required string jump_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jump_url().data(), static_cast<int>(this->jump_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.DocInfo.jump_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jump_url(), target);
  }

  // repeated .doc_index_proto.Pair title_token = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->title_token_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->title_token(static_cast<int>(i)), deterministic, target);
  }

  // repeated .doc_index_proto.Pair content_token = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_token_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->content_token(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doc_index_proto.DocInfo)
  return target;
}

size_t DocInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doc_index_proto.DocInfo)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_content()) {
    // required string content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  if (has_show_url()) {
    // required string show_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_url());
  }

  if (has_jump_url()) {
    // required string jump_url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jump_url());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  return total_size;
}
size_t DocInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doc_index_proto.DocInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string content = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());

    // required string show_url = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->show_url());

    // required string jump_url = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jump_url());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .doc_index_proto.Pair title_token = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->title_token_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->title_token(static_cast<int>(i)));
    }
  }

  // repeated .doc_index_proto.Pair content_token = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->content_token_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content_token(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doc_index_proto.DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doc_index_proto.DocInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doc_index_proto.DocInfo)
    MergeFrom(*source);
  }
}

void DocInfo::MergeFrom(const DocInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doc_index_proto.DocInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  title_token_.MergeFrom(from.title_token_);
  content_token_.MergeFrom(from.content_token_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_show_url();
      show_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.show_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_jump_url();
      jump_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jump_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doc_index_proto.DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocInfo::CopyFrom(const DocInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doc_index_proto.DocInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->title_token())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->content_token())) return false;
  return true;
}

void DocInfo::Swap(DocInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocInfo::InternalSwap(DocInfo* other) {
  using std::swap;
  title_token_.InternalSwap(&other->title_token_);
  content_token_.InternalSwap(&other->content_token_);
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  show_url_.Swap(&other->show_url_);
  jump_url_.Swap(&other->jump_url_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocInfo::GetMetadata() const {
  protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weight::kDocIdFieldNumber;
const int Weight::kWeightFieldNumber;
const int Weight::kFirstPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weight::Weight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_index_2eproto::InitDefaultsWeight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doc_index_proto.Weight)
}
Weight::Weight(const Weight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_pos_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(first_pos_));
  // @@protoc_insertion_point(copy_constructor:doc_index_proto.Weight)
}

void Weight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_pos_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(first_pos_));
}

Weight::~Weight() {
  // @@protoc_insertion_point(destructor:doc_index_proto.Weight)
  SharedDtor();
}

void Weight::SharedDtor() {
}

void Weight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weight::descriptor() {
  ::protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weight& Weight::default_instance() {
  ::protobuf_index_2eproto::InitDefaultsWeight();
  return *internal_default_instance();
}

Weight* Weight::New(::google::protobuf::Arena* arena) const {
  Weight* n = new Weight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Weight::Clear() {
// @@protoc_insertion_point(message_clear_start:doc_index_proto.Weight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_pos_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(first_pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doc_index_proto.Weight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 first_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_first_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doc_index_proto.Weight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doc_index_proto.Weight)
  return false;
#undef DO_
}

void Weight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doc_index_proto.Weight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->doc_id(), output);
  }

  // required int32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // required int32 first_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->first_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doc_index_proto.Weight)
}

::google::protobuf::uint8* Weight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doc_index_proto.Weight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->doc_id(), target);
  }

  // required int32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // required int32 first_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->first_pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doc_index_proto.Weight)
  return target;
}

size_t Weight::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doc_index_proto.Weight)
  size_t total_size = 0;

  if (has_doc_id()) {
    // required uint64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->doc_id());
  }

  if (has_weight()) {
    // required int32 weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  if (has_first_pos()) {
    // required int32 first_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_pos());
  }

  return total_size;
}
size_t Weight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doc_index_proto.Weight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->doc_id());

    // required int32 weight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());

    // required int32 first_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_pos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doc_index_proto.Weight)
  GOOGLE_DCHECK_NE(&from, this);
  const Weight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doc_index_proto.Weight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doc_index_proto.Weight)
    MergeFrom(*source);
  }
}

void Weight::MergeFrom(const Weight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doc_index_proto.Weight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_pos_ = from.first_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Weight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doc_index_proto.Weight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weight::CopyFrom(const Weight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doc_index_proto.Weight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Weight::Swap(Weight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weight::InternalSwap(Weight* other) {
  using std::swap;
  swap(doc_id_, other->doc_id_);
  swap(weight_, other->weight_);
  swap(first_pos_, other->first_pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Weight::GetMetadata() const {
  protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KwdInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KwdInfo::kKeyFieldNumber;
const int KwdInfo::kDocListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KwdInfo::KwdInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_index_2eproto::InitDefaultsKwdInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doc_index_proto.KwdInfo)
}
KwdInfo::KwdInfo(const KwdInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_list_(from.doc_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:doc_index_proto.KwdInfo)
}

void KwdInfo::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KwdInfo::~KwdInfo() {
  // @@protoc_insertion_point(destructor:doc_index_proto.KwdInfo)
  SharedDtor();
}

void KwdInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KwdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KwdInfo::descriptor() {
  ::protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KwdInfo& KwdInfo::default_instance() {
  ::protobuf_index_2eproto::InitDefaultsKwdInfo();
  return *internal_default_instance();
}

KwdInfo* KwdInfo::New(::google::protobuf::Arena* arena) const {
  KwdInfo* n = new KwdInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KwdInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:doc_index_proto.KwdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KwdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doc_index_proto.KwdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doc_index_proto.KwdInfo.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .doc_index_proto.Weight doc_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_doc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doc_index_proto.KwdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doc_index_proto.KwdInfo)
  return false;
#undef DO_
}

void KwdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doc_index_proto.KwdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.KwdInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated .doc_index_proto.Weight doc_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doc_index_proto.KwdInfo)
}

::google::protobuf::uint8* KwdInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doc_index_proto.KwdInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doc_index_proto.KwdInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated .doc_index_proto.Weight doc_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->doc_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doc_index_proto.KwdInfo)
  return target;
}

size_t KwdInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doc_index_proto.KwdInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  // repeated .doc_index_proto.Weight doc_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->doc_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KwdInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doc_index_proto.KwdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const KwdInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KwdInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doc_index_proto.KwdInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doc_index_proto.KwdInfo)
    MergeFrom(*source);
  }
}

void KwdInfo::MergeFrom(const KwdInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doc_index_proto.KwdInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_list_.MergeFrom(from.doc_list_);
  if (from.has_key()) {
    set_has_key();
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void KwdInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doc_index_proto.KwdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KwdInfo::CopyFrom(const KwdInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doc_index_proto.KwdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KwdInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->doc_list())) return false;
  return true;
}

void KwdInfo::Swap(KwdInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KwdInfo::InternalSwap(KwdInfo* other) {
  using std::swap;
  doc_list_.InternalSwap(&other->doc_list_);
  key_.Swap(&other->key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KwdInfo::GetMetadata() const {
  protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Index::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kForwardIndexFieldNumber;
const int Index::kInvertedIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_index_2eproto::InitDefaultsIndex();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doc_index_proto.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      forward_index_(from.forward_index_),
      inverted_index_(from.inverted_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:doc_index_proto.Index)
}

void Index::SharedCtor() {
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:doc_index_proto.Index)
  SharedDtor();
}

void Index::SharedDtor() {
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  ::protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Index& Index::default_instance() {
  ::protobuf_index_2eproto::InitDefaultsIndex();
  return *internal_default_instance();
}

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:doc_index_proto.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forward_index_.Clear();
  inverted_index_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doc_index_proto.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .doc_index_proto.DocInfo forward_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_forward_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .doc_index_proto.KwdInfo inverted_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_inverted_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doc_index_proto.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doc_index_proto.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doc_index_proto.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .doc_index_proto.DocInfo forward_index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forward_index_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->forward_index(static_cast<int>(i)), output);
  }

  // repeated .doc_index_proto.KwdInfo inverted_index = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inverted_index_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inverted_index(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doc_index_proto.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doc_index_proto.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .doc_index_proto.DocInfo forward_index = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forward_index_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->forward_index(static_cast<int>(i)), deterministic, target);
  }

  // repeated .doc_index_proto.KwdInfo inverted_index = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inverted_index_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->inverted_index(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doc_index_proto.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doc_index_proto.Index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .doc_index_proto.DocInfo forward_index = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->forward_index_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->forward_index(static_cast<int>(i)));
    }
  }

  // repeated .doc_index_proto.KwdInfo inverted_index = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->inverted_index_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inverted_index(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doc_index_proto.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doc_index_proto.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doc_index_proto.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doc_index_proto.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forward_index_.MergeFrom(from.forward_index_);
  inverted_index_.MergeFrom(from.inverted_index_);
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doc_index_proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doc_index_proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->forward_index())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inverted_index())) return false;
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  using std::swap;
  forward_index_.InternalSwap(&other->forward_index_);
  inverted_index_.InternalSwap(&other->inverted_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_index_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_index_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace doc_index_proto

// @@protoc_insertion_point(global_scope)
